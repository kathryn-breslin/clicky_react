{"version":3,"sources":["components/Card/Card.tsx","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","name","id","image","handleClick","className","alt","src","onClick","Home","state","seaCreatures","counter","totalScore","clicked","shuffle","sort","Math","random","indexOf","setState","concat","calculateScore","includes","resetGame","console","log","currentScore","this","map","creature","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4+EAsBeA,G,MAXF,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,GAAIC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,YAC/B,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKL,EAAMM,IAAKJ,EACrBK,QAAS,kBAAMJ,EAAYF,IAAKG,UAAU,e,OC+EjCI,E,2MA5EbC,MAAgB,CACdC,eACAC,QAAS,EACTC,WAAY,EACZC,QAAS,I,EAIXC,QAAU,SAACb,GACgB,EAAKQ,MAAtBC,aACKK,KAAK,kBAAMC,KAAKC,SAAW,M,EAI1Cd,YAAc,SAACF,GAAa,IAClBY,EAAY,EAAKJ,MAAjBI,QAEJA,EAAQK,QAAQjB,IAClB,EAAKkB,SAAS,CAAEN,QAASA,EAAQO,OAAOnB,KACxC,EAAKoB,eAAepB,GACpB,EAAKa,QAAQb,IAENY,EAAQS,SAASrB,KACtB,EAAKsB,UAAUtB,GACfuB,QAAQC,IAAI,gB,EAIlBJ,eAAiB,SAACpB,GAAa,IAAD,EACI,EAAKQ,MAA7BE,EADoB,EACpBA,QAASC,EADW,EACXA,WACbc,EAAef,EAAU,EAC7B,EAAKQ,SAAS,CAAER,QAASe,IACzBF,QAAQC,IAAI,kBAAoBd,GAE5Be,GAAgBd,EAClB,EAAKO,SAAS,CAAEP,WAAYc,IAEJ,KAAjBA,GAELF,QAAQC,IAAI,YAEhB,EAAKX,QAAQb,I,EAGfsB,UAAY,SAACtB,GACX,EAAKkB,SAAS,CAAER,QAAS,EAAGE,QAAS,GAAIa,aAAc,IACvD,EAAKZ,QAAQb,I,wEAGL,IAAD,OACP,OACE,6BACE,yBAAKG,UAAU,aACb,4BAAKuB,KAAKlB,MAAME,SAChB,4BAAKgB,KAAKlB,MAAMG,aAGjBF,EAAakB,IAAI,SAAAC,GAAQ,OACxB,yBAAKzB,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CACEH,GAAI4B,EAAS5B,GACb6B,IAAKD,EAAS5B,GACdC,MAAO2B,EAAS3B,MAChBF,KAAM6B,EAAS7B,KAEfG,YAAa,EAAKA,uB,GAnEf4B,aCRJC,G,MANO,WACpB,OACE,kBAAC,EAAD,QCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.df757bf3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\ninterface IProps { \n    name: string;\n    id: any;\n    image: string;\n    handleClick: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;\n\n    // shuffle: (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => void;\n}\nconst Card = ({ name, id, image, handleClick }: IProps) => {\n  return (\n    <div className=\"card\">\n      <img alt={name} src={image}\n      onClick={() => handleClick(id)} className=\"shuffle\"\n      ></img>\n\n    </div>\n  );\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport { Card } from \"../components\";\nimport seaCreatures from \"../seaCreatures.json\";\n\ninterface ICreatures {\n  id: any;\n  name: string;\n  image: string;\n}\n\ninterface IState {\n  seaCreatures: ICreatures[];\n  counter: number;\n  totalScore: number;\n  clicked: string[];\n}\n\nclass Home extends Component {\n  state: IState = {\n    seaCreatures,\n    counter: 0,\n    totalScore: 0,\n    clicked: []\n  };\n\n  //Shuffle cards\n  shuffle = (id: any) => {\n    const { seaCreatures } = this.state;\n    seaCreatures.sort(() => Math.random() - 0.5);\n  };\n\n  //Click counter\n  handleClick = (id: any) => {\n    const { clicked } = this.state;\n\n    if (clicked.indexOf(id)) {\n      this.setState({ clicked: clicked.concat(id) });\n      this.calculateScore(id);\n      this.shuffle(id);\n    }\n    else if (clicked.includes(id)) {\n        this.resetGame(id);\n        console.log(\"Reset Game\")\n    }\n  };\n\n  calculateScore = (id: any) => {\n    const { counter, totalScore } = this.state;\n    let currentScore = counter + 1;\n    this.setState({ counter: currentScore})\n    console.log(\"Counter State: \" + counter);\n    \n    if (currentScore >= totalScore) {\n      this.setState({ totalScore: currentScore });\n    }\n    else if (currentScore === 12) {\n        // this.setState({ currentScore: score })\n        console.log(\"You win!\")\n    }\n    this.shuffle(id);\n  };\n\n  resetGame = (id: any) => {\n    this.setState({ counter: 0, clicked: [], currentScore: 0});\n    this.shuffle(id);\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <h1>{this.state.counter}</h1>\n          <h1>{this.state.totalScore}</h1>\n\n        </div>\n        {seaCreatures.map(creature => (\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <Card\n                id={creature.id}\n                key={creature.id}\n                image={creature.image}\n                name={creature.name}\n                // shuffle={this.shuffle}\n                handleClick={this.handleClick}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport Home from \"./pages/Home\"\nimport './App.css';\nconst App: React.FC = () => {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}